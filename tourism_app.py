# -*- coding: utf-8 -*-
"""TOURISM_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nmB0GTK_9_A1fUk2Pzubf49OPtZeuE3k
"""


import streamlit as st
import pandas as pd
import plotly.express as px
import folium
from streamlit_folium import st_folium
import snowflake.connector

# ----------------- Streamlit App Setup ------------------
st.set_page_config(page_title="Incredible India Explorer", layout="wide")

st.title("\U0001F30D Incredible India Explorer")
st.markdown("""
Welcome to the cultural heart of India! This platform helps you:
- Discover **traditional Indian art forms**
- Explore **cultural hotspots**
- Learn about **government support** for art and tourism
- Promote **responsible tourism**
""")

# ----------------- Snowflake Connection Function ------------------
def load_data_from_snowflake(query):
    try:
        conn = snowflake.connector.connect(
            user="UMAIMAPATHAN",
            password="Umaimapathan160400",
            account="we06505.me-central2.gcp",
            warehouse="COMPUTE_WH",
            database="TOURISM_DATA",
            schema="PUBLIC"
        )
        cursor = conn.cursor()
        cursor.execute(query)
        data = cursor.fetch_pandas_all()  # Use fetch_pandas_all for direct conversion to pandas DataFrame
        conn.close()
        return data
    except Exception as e:
        st.error(f"Error fetching data from Snowflake: {e}")
        return pd.DataFrame()  # Return empty dataframe on error

# ----------------- Sidebar Filters ------------------
st.sidebar.title("Filters")
selected_state = st.sidebar.selectbox("Select a State", ["All", "Kerala", "West Bengal", "Maharashtra", "Tamil Nadu"])
selected_art = st.sidebar.selectbox("Select Art Form", ["All", "Kathakali", "Madhubani", "Warli", "Chhau"])

# ----------------- Art & Culture Explorer ------------------
st.subheader("\U0001F3A8 Art & Culture Explorer")

# Fetch data from Snowflake
art_data = load_data_from_snowflake("SELECT  STATE, ARTFORM, IMAGEURL, DESCRIPTION FROM ART_FORMS")

if art_data.empty:
    st.warning("No data available for Art Forms.")
else:
    # Apply filters
    if selected_state != "All":
        art_data = art_data[art_data['STATE'] == selected_state]
    if selected_art != "All":
        art_data = art_data[art_data['ARTFORM'] == selected_art]

    # Display the data
    for _, row in art_data.iterrows():
        with st.expander(f"{row['ARTFORM']} - {row['STATE']}"):
            st.image(row['IMAGEURL'], width=300)
            st.write(row['DESCRIPTION'])

# ----------------- Cultural Hotspot Dashboard ------------------
st.subheader("\U0001F5FA Cultural Hotspot Dashboard")
tourism_df = load_data_from_snowflake("SELECT YEAR, TOURISTCOUNT, REGION FROM TOURISM_TRENDS")
if not tourism_df.empty:
    fig = px.line(tourism_df, x='YEAR', y='TOURISTCOUNT', color='REGION', title='Annual Tourism Trends by Region')
    st.plotly_chart(fig, use_container_width=True)

# Monthly seasonality chart
st.write("### Monthly Tourist Seasonality")
monthly_df = load_data_from_snowflake("SELECT MONTH, TOURISTCOUNT, Region FROM MONTHLY_SEASONALITY")
if not monthly_df.empty:
  fig2 = px.bar(monthly_df, x='MONTH', y='TOURISTCOUNT', color='REGION', barmode='group',
  title='Monthly Tourist Trends Across Regions')
  st.plotly_chart(fig2, use_container_width=True)

# ----------------- Map ------------------
from streamlit_folium import folium_static
st.write("### Cultural Hotspot Map")
map_df = load_data_from_snowflake("SELECT PLACE, STATE, LATITUDE, LONGITUDE FROM HOTSPOT_LOCATIONS")
if not map_df.empty:
    m = folium.Map(location=[22.5937, 78.9629], zoom_start=5)
    for _, row in map_df.iterrows():
        folium.Marker(
            [row['LATITUDE'], row['LONGITUDE']],
            popup=f"{row['PLACE']} ({row['STATE']})",
            tooltip=row['PLACE']
        ).add_to(m)
    st_folium(m, width=700, height=500)
# ----------------- Hidden Cultural Gems ------------------
st.subheader("\U0001F3F0 Hidden Cultural Gems")
hidden_gems = load_data_from_snowflake("SELECT PLACE, STATE, IMAGEURL, DESCRIPTION, CHALLENGES, UNTOUCHEDREASON FROM HIDDEN_GEMS")
if not hidden_gems.empty:
    for _, row in hidden_gems.iterrows():
        with st.expander(f"{row['PLACE']} - {row['STATE']}"):
            st.image(row['IMAGEURL'], width=300)
            st.markdown(f"**Why it's unique:** {row['DESCRIPTION']}")
            st.markdown(f"**Challenges:** {row['CHALLENGES']}")
            st.markdown(f"**Why it's under-visited:** {row['UNTOUCHEDREASON']}")

# ----------------- Government Schemes & Support ------------------
st.subheader("\U0001F4CA Government Schemes & Support")
gov_data = load_data_from_snowflake("SELECT * FROM GOVERNMENT_SCHEMES")
if not gov_data.empty:
    st.dataframe(gov_data)

# ----------------- Promote Responsible Tourism ------------------
st.subheader("\U0001F4AA Promote Responsible Tourism")
st.markdown("""
- Support local artisans and craftsmen
- Participate in cultural workshops
- Follow eco-friendly travel practices
- Spread awareness and educate others
""")

# ----------------- Data Source Info ------------------
st.markdown("""
### ℹ️ Data Source Information
All datasets have been curated from official resources like [data.gov.in](https://data.gov.in), Ministry of Tourism, and the Archaeological Survey of India.
""")
